variables:
  DOCKER_DRIVER: overlay2

stages:
  - test
  - build
  - package
  - e2e
  - scan
  - scan_results
  - cleanup
  - release

unit-test-backend:
  stage: test
  image: python:3.11-alpine
  script:
    - pip install pipenv
    - cd backend
    - pipenv install --dev
    - pipenv run coverage run -m pytest --junitxml=report.xml tests/unit
    - pipenv run coverage report
    - pipenv run coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: backend/report.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml

build-backend:
  stage: build
  needs: []
  image: python:3.11-alpine
  script:
    - pip install pipenv
    - cd backend
    - pipenv install --dev
    - pipenv run python3 -m build
  artifacts:
    paths:
      - backend/dist
    expire_in: 1 hour

.containerize:
  stage: package
  needs: []
  image: quay.io/podman/stable
  before_script:
    - podman login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

containerize-frontend:
  extends: .containerize
  script:
    - podman build frontend -t ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG}
    - podman push ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG}
  after_script:
    - podman rmi ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG}

containerize-backend:
  extends: .containerize
  needs:
    - job: build-backend
      artifacts: true
  script:
    - podman build backend -t ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG} --build-arg context=ci
    - podman push ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG}
  after_script:
    - podman rmi ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG}

containerize-reverse-proxy:
  extends: .containerize
  script:
    - podman build reverse-proxy -t ${CI_REGISTRY_IMAGE}/reverse-proxy:${CI_COMMIT_REF_SLUG}
    - podman push ${CI_REGISTRY_IMAGE}/reverse-proxy:${CI_COMMIT_REF_SLUG}
  after_script:
    - podman rmi ${CI_REGISTRY_IMAGE}/reverse-proxy:${CI_COMMIT_REF_SLUG}

containerize-e2e-tests:
  extends: .containerize
  script:
    - podman build e2e_enigma -t ${CI_REGISTRY_IMAGE}/e2e-tests:${CI_COMMIT_REF_SLUG}
    - podman push ${CI_REGISTRY_IMAGE}/e2e-tests:${CI_COMMIT_REF_SLUG}
  after_script:
    - podman rmi ${CI_REGISTRY_IMAGE}/e2e-tests:${CI_COMMIT_REF_SLUG}

e2e-test:
  stage: e2e
  needs:
    - containerize-backend
    - containerize-frontend
    - containerize-reverse-proxy
    - containerize-e2e-tests
  image: docker:24-dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - |
      echo -e "version: '2'
      services:
        backend:
          image: ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG}
        frontend:
          image: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG}
        reverse-proxy:
          image: ${CI_REGISTRY_IMAGE}/reverse-proxy:${CI_COMMIT_REF_SLUG}
          ports: [80]" > compose.e2e.yml
    - cat compose.e2e.yml
    - docker compose -f compose.e2e.yml up --detach
    - cat enigma.yaml | docker compose -f compose.e2e.yml exec -i backend tee /etc/enigma.yaml
    - export MAIN_SERVICE=$(docker compose -f compose.e2e.yml port reverse-proxy 80)
    - docker run --env CYPRESS_MAIN_SERVICE=$MAIN_SERVICE --network=host --name e2e-tests-${CI_COMMIT_REF_SLUG} ${CI_REGISTRY_IMAGE}/e2e-tests:${CI_COMMIT_REF_SLUG}
  after_script:
    - docker-compose -f compose.e2e.yml down --rmi all || true
    - docker cp e2e-tests-${CI_COMMIT_REF_SLUG}:/workdir/test-results.xml e2e-test-results.xml || true
    - docker cp e2e-tests-${CI_COMMIT_REF_SLUG}:/workdir/cypress/videos . || true
    - docker cp e2e-tests-${CI_COMMIT_REF_SLUG}:/workdir/cypress/screenshots . || true
    - docker rm e2e-tests-${CI_COMMIT_REF_SLUG} || true
    - docker rmi e2e-tests:${CI_COMMIT_REF_SLUG} || true
  artifacts:
    when: always
    paths:
      - e2e-test-results.xml
      - videos/**/*.mp4
      - screenshots/**/*.png
    reports:
      junit: e2e-test-results.xml
    expire_in: 1 day

include:
  - template: Security/Container-Scanning.gitlab-ci.yml

container_scanning:
  stage: scan
  when: manual

container_scanning_backend:
  extends: container_scanning
  needs:
    - containerize-backend
  when: on_success
  variables:
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG}

container_scanning_frontend:
  extends: container_scanning
  needs:
    - containerize-frontend
  when: on_success
  variables:
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG}

container_scanning_reverse-proxy:
  extends: container_scanning
  needs:
    - containerize-reverse-proxy
  when: on_success
  variables:
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/reverse-proxy:${CI_COMMIT_REF_SLUG}

.container_scanning_results:
  stage: scan_results
  image: alpine:latest
  before_script:
    - apk add --no-cache jq
  script:
  - jq -e "( .vulnerabilities | length ) == 0" ./gl-container-scanning-report.json
  allow_failure: true

container_scanning_results_backend:
  extends: .container_scanning_results
  needs:
    - job: container_scanning_backend
      artifacts: true

container_scanning_results_frontend:
  extends: .container_scanning_results
  needs:
    - job: container_scanning_frontend
      artifacts: true

container_scanning_results_reverse-proxy:
  extends: .container_scanning_results
  needs:
    - job: container_scanning_reverse-proxy
      artifacts: true

.delete-container:
  stage: cleanup
  dependencies: []
  image: 
    name: quay.io/skopeo/stable:latest
    entrypoint: [""]
  before_script:
    - /bin/skopeo login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

remove-app-containers:
  extends: .delete-container
  script:
    - /bin/skopeo delete docker://${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG}
    - /bin/skopeo delete docker://${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG}
    - /bin/skopeo delete docker://${CI_REGISTRY_IMAGE}/reverse-proxy:${CI_COMMIT_REF_SLUG}
  except:
    variables:
      - $CI_COMMIT_TAG

remove-e2e-tests-container:
  extends: .delete-container
  needs:
    - e2e-test
  script:
    - /bin/skopeo delete docker://${CI_REGISTRY_IMAGE}/e2e-tests:${CI_COMMIT_REF_SLUG}

release:
  stage: release
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG != null
      when: manual
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - release-cli create
        --name "Turing-${CI_COMMIT_TAG}"
        --description "A docker image is available at ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG} & ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG} or with the latest tag"
        --tag-name "${CI_COMMIT_TAG}"

add-latest-tag:
  stage: release
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG != null
  needs:
    - 'release'
  image: 
    name: quay.io/skopeo/stable:latest
    entrypoint: [""]
  before_script:
    - /bin/skopeo login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - /bin/skopeo copy docker://${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG} docker://${CI_REGISTRY_IMAGE}/frontend:latest
    - /bin/skopeo copy docker://${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG} docker://${CI_REGISTRY_IMAGE}/backend:latest
    - /bin/skopeo copy docker://${CI_REGISTRY_IMAGE}/reverse-proxy:${CI_COMMIT_REF_SLUG} docker://${CI_REGISTRY_IMAGE}/reverse-proxy:latest
